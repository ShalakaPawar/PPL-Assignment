
---------------------------
B-3 Value Range Propagation
---------------------------

Gimple Output:

	-------------
	    ssa
	-------------

;; Function main (main, funcdef_no=11, decl_uid=2194, cgraph_uid=11)


Symbols to be put in SSA form
{ .MEM }
Incremental SSA update started at block: 0
Number of blocks in CFG: 9
Number of blocks to update: 8 ( 89%)


main ()
{
  int b;
  int a;

<bb 2>:
  a_4 = 4;
  goto <bb 7>;

<bb 3>:
  if (a_1 <= 3)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  b_6 = b_3 + 2;
  goto <bb 6>;

<bb 5>:
  b_7 = b_3 * 2;

<bb 6>:
  # b_2 = PHI <b_6(4), b_7(5)>
  a_8 = a_1 + 1;

<bb 7>:
  # a_1 = PHI <a_4(2), a_8(6)>
  # b_3 = PHI <b_5(D)(2), b_2(6)>
  if (a_1 <= 99)
    goto <bb 3>;
  else
    goto <bb 8>;

<bb 8>:
  printf ("%d%d", a_1, b_3);
  return;

}

	----------
	   vrp1
	----------

;; Function main (main, funcdef_no=12, decl_uid=3089, cgraph_uid=13, symbol_order=12) (executed once)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

b_6 -> { b_2 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 6
Number of blocks to update: 3 ( 50%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

a_9 -> { a_1 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 6
Number of blocks to update: 2 ( 33%)



Value ranges after VRP:

a_1: int [4, 100]
b_2: VARYING
b_3(D): UNDEFINED
b_6: int [b_2, b_2]
b_7: VARYING
a_8: int [5, 100]
a_9: int [4, 99]  EQUIVALENCES: { a_1 } (1 elements)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

a_10 -> { a_1 }
b_11 -> { b_2 }
a_12 -> { a_1 }
b_13 -> { b_2 }
Incremental SSA update started at block: 6
Number of blocks in CFG: 8
Number of blocks to update: 5 ( 62%)


Merging blocks 2 and 6
Removing basic block 3
Merging blocks 7 and 4
main ()
{
  int b;
  int a;

  <bb 2> [local count: 11059540]:

  <bb 3> [local count: 1062682284]:
  # a_12 = PHI <a_8(3), 4(2)>
  # b_13 = PHI <b_7(3), b_3(D)(2)>
  b_7 = b_13 * 2;
  a_8 = a_12 + 1;
  if (a_8 != 100)
    goto <bb 3>; [98.96%]
  else
    goto <bb 4>; [1.04%]

  <bb 4> [local count: 11059541]:
  # b_6 = PHI <b_7(3)>
  printf ("%d%d", 100, b_6);
  return 0;

}

--------------------------------------------------------------------------------------

Solutions:

	1   Variable `a' can take the values  4 to 99. Since, the `if' condition
            will never be  true for the give loop  bounds, [b = b +  2] is never
            executed. Therefore, the optimized  code has eliminated this program
            statement.


